{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nicol\\\\Desktop\\\\journey\\\\Journey\\\\journey\\\\src\\\\components\\\\Question1\\\\index.js\";\nimport React from 'react';\nimport './index.css';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\n\nclass Question1 extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = address => {\n      this.setState({\n        address\n      });\n    };\n\n    this.handleSelect = address => {\n      geocodeByAddress(address).then(results => getLatLng(results[0])).then(latLng => console.log('Success', latLng)).catch(error => console.log('Error', error));\n    };\n\n    if (props.currentQuestion !== 1) {\n      return null;\n    }\n\n    this.state = {\n      address: ''\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }\n    }, \"Where's your starting point?\"), /*#__PURE__*/React.createElement(PlacesAutocomplete, {\n      value: this.state.address,\n      onChange: this.handleChange,\n      onSelect: this.handleSelect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }\n    }, ({\n      getInputProps,\n      suggestions,\n      getSuggestionItemProps,\n      loading\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", Object.assign({}, getInputProps({\n      placeholder: 'Search places...',\n      className: 'location-search-input'\n    }), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"autocomplete-dropdown-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 29\n      }\n    }, loading && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 45\n      }\n    }, \"Loading...\"), suggestions.map(suggestion => {\n      const className = suggestion.active ? 'suggestion-item--active' : 'suggestion-item';\n      const style = suggestion.active ? {\n        backgroundColor: '#fafafa',\n        cursor: 'pointer'\n      } : {\n        backgroundColor: '#fffff',\n        cursor: 'pointer'\n      };\n      return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getSuggestionItemProps(suggestion, {\n        className,\n        style\n      }), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 41\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 41\n        }\n      }, suggestion.description));\n    })))));\n  }\n\n}\n\nexport default Question1;","map":{"version":3,"sources":["C:/Users/nicol/Desktop/journey/Journey/journey/src/components/Question1/index.js"],"names":["React","PlacesAutocomplete","geocodeByAddress","getLatLng","Question1","Component","constructor","props","handleChange","address","setState","handleSelect","then","results","latLng","console","log","catch","error","currentQuestion","state","render","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","map","suggestion","active","style","backgroundColor","cursor","description"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,aAAP;AACA,OAAOC,kBAAP,IAA6BC,gBAA7B,EAA+CC,SAA/C,QAAgE,2BAAhE;;AAEA,MAAMC,SAAN,SAAwBJ,KAAK,CAACK,SAA9B,CAAwC;AACpCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAUnBC,YAVmB,GAUJC,OAAO,IAAI;AACtB,WAAKC,QAAL,CAAc;AAAED,QAAAA;AAAF,OAAd;AACH,KAZkB;;AAAA,SAcnBE,YAdmB,GAcJF,OAAO,IAAI;AACtBP,MAAAA,gBAAgB,CAACO,OAAD,CAAhB,CACKG,IADL,CACUC,OAAO,IAAIV,SAAS,CAACU,OAAO,CAAC,CAAD,CAAR,CAD9B,EAEKD,IAFL,CAEUE,MAAM,IAAIC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB,CAFpB,EAGKG,KAHL,CAGWC,KAAK,IAAIH,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBE,KAArB,CAHpB;AAIH,KAnBkB;;AAEf,QAAIX,KAAK,CAACY,eAAN,KAA0B,CAA9B,EAAiC;AAC7B,aAAO,IAAP;AACH;;AACD,SAAKC,KAAL,GAAa;AACTX,MAAAA,OAAO,EAAE;AADA,KAAb;AAGH;;AAaDY,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADJ,eAEI,oBAAC,kBAAD;AACI,MAAA,KAAK,EAAE,KAAKD,KAAL,CAAWX,OADtB;AAEI,MAAA,QAAQ,EAAE,KAAKD,YAFnB;AAGI,MAAA,QAAQ,EAAE,KAAKG,YAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKK,CAAC;AAAEW,MAAAA,aAAF;AAAiBC,MAAAA,WAAjB;AAA8BC,MAAAA,sBAA9B;AAAsDC,MAAAA;AAAtD,KAAD,kBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,+CACQH,aAAa,CAAC;AACdI,MAAAA,WAAW,EAAE,kBADC;AAEdC,MAAAA,SAAS,EAAE;AAFG,KAAD,CADrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADJ,eAOI;AAAK,MAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKF,OAAO,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADhB,EAEKF,WAAW,CAACK,GAAZ,CAAgBC,UAAU,IAAI;AAC3B,YAAMF,SAAS,GAAEE,UAAU,CAACC,MAAX,GAAoB,yBAApB,GAAgD,iBAAjE;AACA,YAAMC,KAAK,GAAGF,UAAU,CAACC,MAAX,GAAoB;AAAEE,QAAAA,eAAe,EAAE,SAAnB;AAA8BC,QAAAA,MAAM,EAAE;AAAtC,OAApB,GAAwE;AAAED,QAAAA,eAAe,EAAE,QAAnB;AAA6BC,QAAAA,MAAM,EAAE;AAArC,OAAtF;AACA,0BACI,6CACIT,sBAAsB,CAACK,UAAD,EAAa;AACnCF,QAAAA,SADmC;AAEnCI,QAAAA;AAFmC,OAAb,CAD1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOF,UAAU,CAACK,WAAlB,CANA,CADJ;AAUH,KAbA,CAFL,CAPJ,CANR,CAFJ,CADJ;AAiEC;;AAxF+B;;AA4FxC,eAAe9B,SAAf","sourcesContent":["import React from 'react';\r\nimport './index.css';\r\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\r\n\r\nclass Question1 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        if (props.currentQuestion !== 1) {\r\n            return null;\r\n        }\r\n        this.state = {\r\n            address: ''\r\n        }\r\n    }\r\n\r\n    handleChange = address => {\r\n        this.setState({ address });\r\n    }\r\n\r\n    handleSelect = address => {\r\n        geocodeByAddress(address)\r\n            .then(results => getLatLng(results[0]))\r\n            .then(latLng => console.log('Success', latLng))\r\n            .catch(error => console.log('Error', error));\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>Where's your starting point?</h3>\r\n                <PlacesAutocomplete\r\n                    value={this.state.address}\r\n                    onChange={this.handleChange}\r\n                    onSelect={this.handleSelect}\r\n                >\r\n                    {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n                        <div>\r\n                            <input\r\n                                {...getInputProps({\r\n                                    placeholder: 'Search places...',\r\n                                    className: 'location-search-input',\r\n                                })}\r\n                                />\r\n                            <div className=\"autocomplete-dropdown-container\">\r\n                                {loading && <div>Loading...</div>}\r\n                                {suggestions.map(suggestion => {\r\n                                    const className= suggestion.active ? 'suggestion-item--active' : 'suggestion-item';\r\n                                    const style = suggestion.active ? { backgroundColor: '#fafafa', cursor: 'pointer' } : { backgroundColor: '#fffff', cursor: 'pointer' };\r\n                                    return(\r\n                                        <div\r\n                                        {...getSuggestionItemProps(suggestion, {\r\n                                            className,\r\n                                            style,\r\n                                        })}>\r\n                                        \r\n                                        <span>{suggestion.description}</span>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </PlacesAutocomplete>\r\n                {/* <Dropdown>\r\n                    <Dropdown.Toggle className=\"bgcolor\">\r\n                        Choose your country\r\n                    </Dropdown.Toggle>\r\n\r\n                    <Dropdown.Menu>\r\n                        <Dropdown.Item href=\"#/action-1\">1</Dropdown.Item>\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n                <Dropdown>\r\n                    <Dropdown.Toggle className=\"bgcolor\">\r\n                        Choose your state\r\n                    </Dropdown.Toggle>\r\n\r\n                    <Dropdown.Menu>\r\n                        <Dropdown.Item href=\"#/action-1\">1</Dropdown.Item>\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n                <Dropdown>\r\n                    <Dropdown.Toggle className=\"bgcolor\">\r\n                        Choose your city\r\n                    </Dropdown.Toggle>\r\n\r\n                    <Dropdown.Menu>\r\n                        <Dropdown.Item href=\"#/action-1\">1</Dropdown.Item>\r\n                    </Dropdown.Menu>\r\n                </Dropdown> */}\r\n                </div>\r\n            );\r\n        }\r\n\r\n}\r\n\r\nexport default Question1;"]},"metadata":{},"sourceType":"module"}